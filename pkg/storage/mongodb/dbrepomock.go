// Code generated by MockGen. DO NOT EDIT.
// Source: dbrepo.go

// Package mongodb is a generated GoMock package.
package mongodb

import (
	context "context"
	reflect "reflect"

	news "com.thanos/pkg/news"
	gomock "github.com/golang/mock/gomock"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// BulkInsert mocks base method.
func (m *MockDBRepo) BulkInsert(arg0 []news.NewsArticle) (*BulkInsertResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkInsert", arg0)
	ret0, _ := ret[0].(*BulkInsertResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkInsert indicates an expected call of BulkInsert.
func (mr *MockDBRepoMockRecorder) BulkInsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkInsert", reflect.TypeOf((*MockDBRepo)(nil).BulkInsert), arg0)
}

// GetArticleByID mocks base method.
func (m *MockDBRepo) GetArticleByID(arg0 context.Context, arg1 string) (Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticleByID", arg0, arg1)
	ret0, _ := ret[0].(Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticleByID indicates an expected call of GetArticleByID.
func (mr *MockDBRepoMockRecorder) GetArticleByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticleByID", reflect.TypeOf((*MockDBRepo)(nil).GetArticleByID), arg0, arg1)
}

// GetNews mocks base method.
func (m *MockDBRepo) GetNews(arg0 context.Context) ([]Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", arg0)
	ret0, _ := ret[0].([]Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockDBRepoMockRecorder) GetNews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockDBRepo)(nil).GetNews), arg0)
}
